{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "RegisterUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-serverless-step-functions-dev-registerUser"
      }
    },
    "FirstFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-serverless-step-functions-dev-firstFunction"
      }
    },
    "SecondFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-serverless-step-functions-dev-secondFunction"
      }
    },
    "GetExecutionStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-serverless-step-functions-dev-getExecutionStatus"
      }
    },
    "PrimeraDespuesDelRegistroLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-serverless-step-functions-dev-primeraDespuesDelRegistro"
      }
    },
    "SegundaDespuesDelRegistroLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-serverless-step-functions-dev-segundaDespuesDelRegistro"
      }
    },
    "StartStateMachineLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/my-serverless-step-functions-dev-startStateMachine"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "my-serverless-step-functions",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-serverless-step-functions-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-serverless-step-functions-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:DescribeExecution",
                    "states:StartExecution"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Users"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "my-serverless-step-functions",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "RegisterUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-cc71c788-7df0",
          "S3Key": "serverless/my-serverless-step-functions/dev/1739845260442-2025-02-18T02:21:00.442Z/my-serverless-step-functions.zip"
        },
        "Handler": "handler.registerUser",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-serverless-step-functions-dev-registerUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RegisterUserLogGroup"
      ]
    },
    "FirstFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-cc71c788-7df0",
          "S3Key": "serverless/my-serverless-step-functions/dev/1739845260442-2025-02-18T02:21:00.442Z/my-serverless-step-functions.zip"
        },
        "Handler": "handler.firstFunction",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-serverless-step-functions-dev-firstFunction",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FirstFunctionLogGroup"
      ]
    },
    "SecondFunctionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-cc71c788-7df0",
          "S3Key": "serverless/my-serverless-step-functions/dev/1739845260442-2025-02-18T02:21:00.442Z/my-serverless-step-functions.zip"
        },
        "Handler": "handler.secondFunction",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-serverless-step-functions-dev-secondFunction",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SecondFunctionLogGroup"
      ]
    },
    "GetExecutionStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-cc71c788-7df0",
          "S3Key": "serverless/my-serverless-step-functions/dev/1739845260442-2025-02-18T02:21:00.442Z/my-serverless-step-functions.zip"
        },
        "Handler": "handler.getExecutionStatus",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-serverless-step-functions-dev-getExecutionStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetExecutionStatusLogGroup"
      ]
    },
    "PrimeraDespuesDelRegistroLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-cc71c788-7df0",
          "S3Key": "serverless/my-serverless-step-functions/dev/1739845260442-2025-02-18T02:21:00.442Z/my-serverless-step-functions.zip"
        },
        "Handler": "handler.primeraDespuesDelRegistro",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-serverless-step-functions-dev-primeraDespuesDelRegistro",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PrimeraDespuesDelRegistroLogGroup"
      ]
    },
    "SegundaDespuesDelRegistroLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-cc71c788-7df0",
          "S3Key": "serverless/my-serverless-step-functions/dev/1739845260442-2025-02-18T02:21:00.442Z/my-serverless-step-functions.zip"
        },
        "Handler": "handler.segundaDespuesDelRegistro",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-serverless-step-functions-dev-segundaDespuesDelRegistro",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SegundaDespuesDelRegistroLogGroup"
      ]
    },
    "StartStateMachineLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-cc71c788-7df0",
          "S3Key": "serverless/my-serverless-step-functions/dev/1739845260442-2025-02-18T02:21:00.442Z/my-serverless-step-functions.zip"
        },
        "Handler": "handler.startStateMachine",
        "Runtime": "nodejs18.x",
        "FunctionName": "my-serverless-step-functions-dev-startStateMachine",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "StartStateMachineLogGroup"
      ]
    },
    "RegisterUserLambdaVersion5YEn4hrpnkWetckrl2Pcwu2p1g52C3rHX3xQzP7Sz3M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterUserLambdaFunction"
        },
        "CodeSha256": "iAYrGYrHkBl2MF5mLwyULXesdBAAnkq6bc6eNNW+mn4="
      }
    },
    "FirstFunctionLambdaVersionLfO8RJIwSHNwHkzNiHBTT73YuaR2VGpR5sxh4ga493w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FirstFunctionLambdaFunction"
        },
        "CodeSha256": "iAYrGYrHkBl2MF5mLwyULXesdBAAnkq6bc6eNNW+mn4="
      }
    },
    "SecondFunctionLambdaVersionZ4xCgNEBqSK1D6uy9NbVDCGW5YDHit2P01GLDFWeAXI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SecondFunctionLambdaFunction"
        },
        "CodeSha256": "iAYrGYrHkBl2MF5mLwyULXesdBAAnkq6bc6eNNW+mn4="
      }
    },
    "GetExecutionStatusLambdaVersionMGzMpqxyN6krKS2ZimdsouEjWaw0tH3nIBXuizHg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetExecutionStatusLambdaFunction"
        },
        "CodeSha256": "iAYrGYrHkBl2MF5mLwyULXesdBAAnkq6bc6eNNW+mn4="
      }
    },
    "PrimeraDespuesDelRegistroLambdaVersionhf5Mdmnlr2mFV1lu687JnxzHsqyQwR9ucKV0gJCT780": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PrimeraDespuesDelRegistroLambdaFunction"
        },
        "CodeSha256": "iAYrGYrHkBl2MF5mLwyULXesdBAAnkq6bc6eNNW+mn4="
      }
    },
    "SegundaDespuesDelRegistroLambdaVersionkmAYCOBFvTZL0zWfDwHbPCPorwsdmEbFx4nQMIL4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SegundaDespuesDelRegistroLambdaFunction"
        },
        "CodeSha256": "iAYrGYrHkBl2MF5mLwyULXesdBAAnkq6bc6eNNW+mn4="
      }
    },
    "StartStateMachineLambdaVersion6IX2SLicGczz62Inb8CZlwZHAgYq5PP3kK5gZBa9T8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "StartStateMachineLambdaFunction"
        },
        "CodeSha256": "iAYrGYrHkBl2MF5mLwyULXesdBAAnkq6bc6eNNW+mn4="
      }
    },
    "UserRegistrationFlowStepFunctionsStateMachineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-my-serverless-step-functions-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "PrimeraDespuesDelRegistroLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "PrimeraDespuesDelRegistroLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SegundaDespuesDelRegistroLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "SegundaDespuesDelRegistroLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "MyStateMachineStepFunctionsStateMachineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-my-serverless-step-functions-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "FirstFunctionLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "FirstFunctionLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SecondFunctionLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "SecondFunctionLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "UpdatePriceListsBCRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-my-serverless-step-functions-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getPriceListsBC:$LATEST",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getPriceListsBC:$LATEST:*",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getPricesByCustomersAssa:$LATEST",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getPricesByCustomersAssa:$LATEST:*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CrearOrden2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-my-serverless-step-functions-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetOrderBC:$LATEST",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetOrderBC:$LATEST:*",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetProducts:$LATEST",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetProducts:$LATEST:*",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetAlmacen:$LATEST",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetAlmacen:$LATEST:*",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetOrderB2B:$LATEST",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetOrderB2B:$LATEST:*",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetBillToB2B:$LATEST",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetBillToB2B:$LATEST:*",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetCustomerMessage:$LATEST",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetCustomerMessage:$LATEST:*",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFcreateOrder:$LATEST",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFcreateOrder:$LATEST:*",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFcancelarOrden:$LATEST",
                    "arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFcancelarOrden:$LATEST:*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "UserRegistrationFlowStepFunctionsStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": [
            "{\n  \"Comment\": \"Step Function que se ejecuta después del registro de usuario\",\n  \"StartAt\": \"PrimeraDespuesDelRegistro\",\n  \"States\": {\n    \"PrimeraDespuesDelRegistro\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${eb344c04f50e7ec5d5bf54ab9998aee5}\",\n      \"Next\": \"SegundaDespuesDelRegistro\"\n    },\n    \"SegundaDespuesDelRegistro\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${cdcf0a02b7d2a20d9469c1d34ab43ade}\",\n      \"End\": true\n    }\n  }\n}",
            {
              "eb344c04f50e7ec5d5bf54ab9998aee5": {
                "Fn::GetAtt": [
                  "PrimeraDespuesDelRegistroLambdaFunction",
                  "Arn"
                ]
              },
              "cdcf0a02b7d2a20d9469c1d34ab43ade": {
                "Fn::GetAtt": [
                  "SegundaDespuesDelRegistroLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "UserRegistrationFlowStepFunctionsStateMachineRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UserRegistrationFlowStepFunctionsStateMachineRole"
      ]
    },
    "MyStateMachineStepFunctionsStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": [
            "{\n  \"Comment\": \"Ejemplo de Step Function con API Gateway\",\n  \"StartAt\": \"FirstStep\",\n  \"States\": {\n    \"FirstStep\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${9fd299087cac7a119b9182bb17220ab0}\",\n      \"Next\": \"SecondStep\"\n    },\n    \"SecondStep\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${562e85854b6de52ff321b4a445778d97}\",\n      \"End\": true\n    }\n  }\n}",
            {
              "9fd299087cac7a119b9182bb17220ab0": {
                "Fn::GetAtt": [
                  "FirstFunctionLambdaFunction",
                  "Arn"
                ]
              },
              "562e85854b6de52ff321b4a445778d97": {
                "Fn::GetAtt": [
                  "SecondFunctionLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "MyStateMachineStepFunctionsStateMachineRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MyStateMachineStepFunctionsStateMachineRole"
      ]
    },
    "UpdatePriceListsBC": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": "{\n  \"Comment\": \"State machine to update price lists.\",\n  \"StartAt\": \"getPriceListsBC\",\n  \"States\": {\n    \"getPriceListsBC\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\n      \"OutputPath\": \"$.Payload.body.data\",\n      \"Parameters\": {\n        \"FunctionName\": \"arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getPriceListsBC:$LATEST\",\n        \"Payload\": {\n          \"limit\": \"1000\"\n        }\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 6,\n          \"MaxAttempts\": 6,\n          \"BackoffRate\": 2\n        }\n      ],\n      \"Next\": \"IteratePriceLists\"\n    },\n    \"IteratePriceLists\": {\n      \"Type\": \"Map\",\n      \"ItemProcessor\": {\n        \"ProcessorConfig\": {\n          \"Mode\": \"INLINE\"\n        },\n        \"StartAt\": \"getPricesByCustomersAssa\",\n        \"States\": {\n          \"getPricesByCustomersAssa\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"arn:aws:states:::lambda:invoke\",\n            \"Parameters\": {\n              \"Payload.$\": \"$\",\n              \"FunctionName\": \"arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getPricesByCustomersAssa:$LATEST\"\n            },\n            \"Retry\": [\n              {\n                \"ErrorEquals\": [\n                  \"States.ALL\"\n                ],\n                \"IntervalSeconds\": 6,\n                \"MaxAttempts\": 6,\n                \"BackoffRate\": 2\n              }\n            ],\n            \"OutputPath\": \"$.Payload.body\",\n            \"End\": true\n          }\n        }\n      },\n      \"End\": true,\n      \"ItemSelector\": {\n        \"billTo.$\": \"$$.Map.Item.Value.billTo\",\n        \"price_list_id.$\": \"$$.Map.Item.Value.price_list_id\"\n      },\n      \"ResultSelector\": {},\n      \"MaxConcurrency\": 1\n    }\n  }\n}",
        "RoleArn": {
          "Fn::GetAtt": [
            "UpdatePriceListsBCRole",
            "Arn"
          ]
        },
        "StateMachineName": "UpdatePriceListsBC"
      },
      "DependsOn": [
        "UpdatePriceListsBCRole"
      ]
    },
    "CrearOrden2": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": "{\n  \"Comment\": \"A description of my state machine\",\n  \"StartAt\": \"Wait (1)\",\n  \"States\": {\n    \"Wait (1)\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 220,\n      \"Next\": \"GetOrderBC\"\n    },\n    \"GetOrderBC\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\n      \"OutputPath\": \"$.Payload\",\n      \"Parameters\": {\n        \"Payload.$\": \"$\",\n        \"FunctionName\": \"arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetOrderBC:$LATEST\"\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"Lambda.ServiceException\",\n            \"Lambda.AWSLambdaException\",\n            \"Lambda.SdkClientException\",\n            \"Lambda.TooManyRequestsException\"\n          ],\n          \"IntervalSeconds\": 1,\n          \"MaxAttempts\": 3,\n          \"BackoffRate\": 2\n        }\n      ],\n      \"Next\": \"Parallel\"\n    },\n    \"Parallel\": {\n      \"Type\": \"Parallel\",\n      \"Branches\": [\n        {\n          \"StartAt\": \"GetProductsBC\",\n          \"States\": {\n            \"GetProductsBC\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"arn:aws:states:::lambda:invoke\",\n              \"Parameters\": {\n                \"Payload.$\": \"$\",\n                \"FunctionName\": \"arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetProducts:$LATEST\"\n              },\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ],\n                  \"IntervalSeconds\": 6,\n                  \"MaxAttempts\": 6,\n                  \"BackoffRate\": 2\n                }\n              ],\n              \"Next\": \"Map\",\n              \"OutputPath\": \"$.Payload\"\n            },\n            \"Map\": {\n              \"Type\": \"Map\",\n              \"End\": true,\n              \"Iterator\": {\n                \"StartAt\": \"GetAlmacen\",\n                \"States\": {\n                  \"GetAlmacen\": {\n                    \"Type\": \"Task\",\n                    \"Resource\": \"arn:aws:states:::lambda:invoke\",\n                    \"OutputPath\": \"$.Payload\",\n                    \"Parameters\": {\n                      \"Payload.$\": \"$\",\n                      \"FunctionName\": \"arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetAlmacen:$LATEST\"\n                    },\n                    \"Retry\": [\n                      {\n                        \"ErrorEquals\": [\n                          \"States.ALL\"\n                        ],\n                        \"IntervalSeconds\": 6,\n                        \"MaxAttempts\": 6,\n                        \"BackoffRate\": 2\n                      }\n                    ],\n                    \"End\": true\n                  }\n                }\n              },\n              \"ItemsPath\": \"$.body\",\n              \"MaxConcurrency\": 10,\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ],\n                  \"BackoffRate\": 1,\n                  \"IntervalSeconds\": 6,\n                  \"MaxAttempts\": 6\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"StartAt\": \"Wait\",\n          \"States\": {\n            \"Wait\": {\n              \"Type\": \"Wait\",\n              \"Seconds\": 25,\n              \"Next\": \"GetOrderB2B\"\n            },\n            \"GetOrderB2B\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"arn:aws:states:::lambda:invoke\",\n              \"OutputPath\": \"$.Payload\",\n              \"Parameters\": {\n                \"Payload.$\": \"$\",\n                \"FunctionName\": \"arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetOrderB2B:$LATEST\"\n              },\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ],\n                  \"IntervalSeconds\": 6,\n                  \"MaxAttempts\": 6,\n                  \"BackoffRate\": 2\n                }\n              ],\n              \"Next\": \"GetBillTo\"\n            },\n            \"GetBillTo\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"arn:aws:states:::lambda:invoke\",\n              \"OutputPath\": \"$.Payload\",\n              \"Parameters\": {\n                \"Payload.$\": \"$\",\n                \"FunctionName\": \"arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetBillToB2B:$LATEST\"\n              },\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ],\n                  \"IntervalSeconds\": 6,\n                  \"MaxAttempts\": 6,\n                  \"BackoffRate\": 2\n                }\n              ],\n              \"End\": true\n            }\n          }\n        },\n        {\n          \"StartAt\": \"GetCustomerMessage\",\n          \"States\": {\n            \"GetCustomerMessage\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"arn:aws:states:::lambda:invoke\",\n              \"OutputPath\": \"$.Payload\",\n              \"Parameters\": {\n                \"Payload.$\": \"$\",\n                \"FunctionName\": \"arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFgetCustomerMessage:$LATEST\"\n              },\n              \"Retry\": [\n                {\n                  \"ErrorEquals\": [\n                    \"States.ALL\"\n                  ],\n                  \"IntervalSeconds\": 6,\n                  \"MaxAttempts\": 6,\n                  \"BackoffRate\": 2\n                }\n              ],\n              \"End\": true\n            }\n          }\n        }\n      ],\n      \"Next\": \"createOrder\"\n    },\n    \"createOrder\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\n      \"OutputPath\": \"$.Payload\",\n      \"Parameters\": {\n        \"Payload.$\": \"$\",\n        \"FunctionName\": \"arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFcreateOrder:$LATEST\"\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 6,\n          \"MaxAttempts\": 6,\n          \"BackoffRate\": 2\n        }\n      ],\n      \"Next\": \"Error 400\"\n    },\n    \"Error 400\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.body.status\",\n          \"NumericEquals\": 200,\n          \"Next\": \"Orden Creada\"\n        },\n        {\n          \"Variable\": \"$.body.status\",\n          \"NumericEquals\": 600,\n          \"Comment\": \"Pedido Duplicado 600\",\n          \"Next\": \"Pedido Duplicado\"\n        }\n      ],\n      \"Default\": \"CancelOrder\"\n    },\n    \"CancelOrder\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\n      \"OutputPath\": \"$.Payload\",\n      \"Parameters\": {\n        \"Payload.$\": \"$\",\n        \"FunctionName\": \"arn:aws:lambda:us-east-1:777933978536:function:assaabloy-qa-getSFcancelarOrden:$LATEST\"\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 6,\n          \"MaxAttempts\": 6,\n          \"BackoffRate\": 2\n        }\n      ],\n      \"Next\": \"Fail\"\n    },\n    \"Pedido Duplicado\": {\n      \"Type\": \"Fail\"\n    },\n    \"Orden Creada\": {\n      \"Type\": \"Succeed\"\n    },\n    \"Fail\": {\n      \"Type\": \"Fail\"\n    }\n  }\n}",
        "RoleArn": {
          "Fn::GetAtt": [
            "CrearOrden2Role",
            "Arn"
          ]
        },
        "StateMachineName": "CrearOrden2"
      },
      "DependsOn": [
        "CrearOrden2Role"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-my-serverless-step-functions",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceRegister": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "register",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceStatus": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "status",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceStart": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "start",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodRegisterOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceRegister"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodRegisterPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRegister"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RegisterUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RegisterUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodStatusGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceStatus"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetExecutionStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetExecutionStatusLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodStartPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceStart"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "StartStateMachineLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "StartStateMachineLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1739845251641": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodRegisterOptions",
        "ApiGatewayMethodRegisterPost",
        "ApiGatewayMethodStatusGet",
        "ApiGatewayMethodStartPost"
      ]
    },
    "RegisterUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetExecutionStatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetExecutionStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "StartStateMachineLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "StartStateMachineLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-cc71c788-7df0",
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-ServerlessDeploymentBucketName"
      }
    },
    "RegisterUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterUserLambdaVersion5YEn4hrpnkWetckrl2Pcwu2p1g52C3rHX3xQzP7Sz3M"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-RegisterUserLambdaFunctionQualifiedArn"
      }
    },
    "FirstFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FirstFunctionLambdaVersionLfO8RJIwSHNwHkzNiHBTT73YuaR2VGpR5sxh4ga493w"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-FirstFunctionLambdaFunctionQualifiedArn"
      }
    },
    "SecondFunctionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SecondFunctionLambdaVersionZ4xCgNEBqSK1D6uy9NbVDCGW5YDHit2P01GLDFWeAXI"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-SecondFunctionLambdaFunctionQualifiedArn"
      }
    },
    "GetExecutionStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetExecutionStatusLambdaVersionMGzMpqxyN6krKS2ZimdsouEjWaw0tH3nIBXuizHg"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-GetExecutionStatusLambdaFunctionQualifiedArn"
      }
    },
    "PrimeraDespuesDelRegistroLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PrimeraDespuesDelRegistroLambdaVersionhf5Mdmnlr2mFV1lu687JnxzHsqyQwR9ucKV0gJCT780"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-PrimeraDespuesDelRegistroLambdaFunctionQualifiedArn"
      }
    },
    "SegundaDespuesDelRegistroLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SegundaDespuesDelRegistroLambdaVersionkmAYCOBFvTZL0zWfDwHbPCPorwsdmEbFx4nQMIL4"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-SegundaDespuesDelRegistroLambdaFunctionQualifiedArn"
      }
    },
    "StartStateMachineLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "StartStateMachineLambdaVersion6IX2SLicGczz62Inb8CZlwZHAgYq5PP3kK5gZBa9T8"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-StartStateMachineLambdaFunctionQualifiedArn"
      }
    },
    "UserRegistrationFlowStepFunctionsStateMachineArn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "UserRegistrationFlowStepFunctionsStateMachine"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-UserRegistrationFlowStepFunctionsStateMachineArn"
      }
    },
    "MyStateMachineStepFunctionsStateMachineArn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "MyStateMachineStepFunctionsStateMachine"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-MyStateMachineStepFunctionsStateMachineArn"
      }
    },
    "UpdatePriceListsBCArn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "UpdatePriceListsBC"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-UpdatePriceListsBCArn"
      }
    },
    "CrearOrden2Arn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "CrearOrden2"
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-CrearOrden2Arn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-my-serverless-step-functions-dev-ServiceEndpoint"
      }
    }
  }
}