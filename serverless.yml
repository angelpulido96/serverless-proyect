service: my-serverless-step-functions

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "states:DescribeExecution"
        - "states:StartExecution"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
      Resource: "arn:aws:dynamodb:us-east-1:*:table/Users"

plugins:
  - serverless-step-functions
  - serverless-offline

functions:
  registerUser:
    handler: handler.registerUser
    events:
      - http:
          path: register
          method: post
          cors: true

  firstFunction:
    handler: handler.firstFunction

  secondFunction:
    handler: handler.secondFunction

  getExecutionStatus:
    handler: handler.getExecutionStatus
    events:
      - http:
          path: status
          method: get

  primeraDespuesDelRegistro:
    handler: handler.primeraDespuesDelRegistro

  segundaDespuesDelRegistro:
    handler: handler.segundaDespuesDelRegistro

  startStateMachine:
    handler: handler.startStateMachine
    events:
      - http:
          path: start
          method: post

  getPriceListsBC:
    handler: handler.getPriceListsBC

  getPricesByCustomersAssa:
    handler: handler.getPricesByCustomersAssa

  getOrderBC:
    handler: handler.getOrderBC

  getProductsBC:
    handler: handler.getProductsBC

  getOrderB2B:
    handler: handler.getOrderB2B

  getBillToB2B:
    handler: handler.getBillToB2B

  getCustomerMessage:
    handler: handler.getCustomerMessage

  createOrder:
    handler: handler.createOrder

  cancelOrder:
    handler: handler.cancelOrder

  getAlmacen:
    handler: handler.GetAlmacen

stepFunctions:
  stateMachines:
    userRegistrationFlow:
      definition:
        Comment: "Step Function que se ejecuta despu√©s del registro de usuario"
        StartAt: PrimeraDespuesDelRegistro
        States:
          PrimeraDespuesDelRegistro:
            Type: Task
            Resource:
              Fn::GetAtt: [primeraDespuesDelRegistro, Arn]
            Next: SegundaDespuesDelRegistro

          SegundaDespuesDelRegistro:
            Type: Task
            Resource:
              Fn::GetAtt: [segundaDespuesDelRegistro, Arn]
            End: true

    myStateMachine:
      definition:
        Comment: "Ejemplo de Step Function con API Gateway"
        StartAt: FirstStep
        States:
          FirstStep:
            Type: Task
            Resource:
              Fn::GetAtt: [firstFunction, Arn]
            Next: SecondStep

          SecondStep:
            Type: Task
            Resource:
              Fn::GetAtt: [secondFunction, Arn]
            End: true

    updatePriceLists:
      name: UpdatePriceListsBC
      definition:
        Comment: "State machine to update price lists."
        StartAt: getPriceListsBC
        States:
          getPriceListsBC:
            Type: Task
            Resource:
              Fn::GetAtt: [getPriceListsBC, Arn]
            OutputPath: "$.Payload.body.data"
            Parameters:
              Payload:
                limit: "1000"
            Retry:
              - ErrorEquals: ["States.ALL"]
                IntervalSeconds: 6
                MaxAttempts: 6
                BackoffRate: 2
            Next: IteratePriceLists

          IteratePriceLists:
            Type: Map
            ItemProcessor:
              ProcessorConfig:
                Mode: "INLINE"
              StartAt: getPricesByCustomersAssa
              States:
                getPricesByCustomersAssa:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [getPricesByCustomersAssa, Arn]
                  Parameters:
                    Payload.$: "$"
                  Retry:
                    - ErrorEquals: ["States.ALL"]
                      IntervalSeconds: 6
                      MaxAttempts: 6
                      BackoffRate: 2
                  OutputPath: "$.Payload.body"
                  End: true
            End: true
            ItemSelector:
              billTo.$: "$$.Map.Item.Value.billTo"
              price_list_id.$: "$$.Map.Item.Value.price_list_id"
            ResultSelector: {}
            MaxConcurrency: 1

    CrearOrden2:
      name: CrearOrden2
      definition:
        Comment: "A description of my state machine"
        StartAt: Wait (1)
        States:
          Wait (1):
            Type: Wait
            Seconds: 220
            Next: GetOrderBC

          GetOrderBC:
            Type: Task
            Resource:
              Fn::GetAtt: [getOrderBC, Arn]
            OutputPath: "$.Payload"
            Retry:
              - ErrorEquals:
                  - "Lambda.ServiceException"
                  - "Lambda.AWSLambdaException"
                  - "Lambda.SdkClientException"
                  - "Lambda.TooManyRequestsException"
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            Next: Parallel

          Parallel:
            Type: Parallel
            Branches:
              - StartAt: GetProductsBC
                States:
                  GetProductsBC:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [getProductsBC, Arn]
                    Retry:
                      - ErrorEquals: ["States.ALL"]
                        IntervalSeconds: 6
                        MaxAttempts: 6
                        BackoffRate: 2
                    Next: Map
                    OutputPath: "$.Payload"

                  Map:
                    Type: Map
                    End: true
                    Iterator:
                      StartAt: GetAlmacen
                      States:
                        GetAlmacen:
                          Type: Task
                          Resource:
                            Fn::GetAtt: [getAlmacen, Arn]
                          OutputPath: "$.Payload"
                          Retry:
                            - ErrorEquals: ["States.ALL"]
                              IntervalSeconds: 6
                              MaxAttempts: 6
                              BackoffRate: 2
                          End: true
                    ItemsPath: "$.body"
                    MaxConcurrency: 10
                    Retry:
                      - ErrorEquals: ["States.ALL"]
                        BackoffRate: 1
                        IntervalSeconds: 6
                        MaxAttempts: 6

              - StartAt: Wait
                States:
                  Wait:
                    Type: Wait
                    Seconds: 25
                    Next: GetOrderB2B

                  GetOrderB2B:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [getOrderB2B, Arn]
                    OutputPath: "$.Payload"
                    Retry:
                      - ErrorEquals: ["States.ALL"]
                        IntervalSeconds: 6
                        MaxAttempts: 6
                        BackoffRate: 2
                    Next: GetBillTo

                  GetBillTo:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [getBillToB2B, Arn]
                    OutputPath: "$.Payload"
                    Retry:
                      - ErrorEquals: ["States.ALL"]
                        IntervalSeconds: 6
                        MaxAttempts: 6
                        BackoffRate: 2
                    End: true

              - StartAt: GetCustomerMessage
                States:
                  GetCustomerMessage:
                    Type: Task
                    Resource:
                      Fn::GetAtt: [getCustomerMessage, Arn]
                    OutputPath: "$.Payload"
                    Retry:
                      - ErrorEquals: ["States.ALL"]
                        IntervalSeconds: 6
                        MaxAttempts: 6
                        BackoffRate: 2
                    End: true
            Next: createOrder

          createOrder:
            Type: Task
            Resource:
              Fn::GetAtt: [createOrder, Arn]
            OutputPath: "$.Payload"
            Retry:
              - ErrorEquals: ["States.ALL"]
                IntervalSeconds: 6
                MaxAttempts: 6
                BackoffRate: 2
            Next: Error 400

          Error 400:
            Type: Choice
            Choices:
              - Variable: "$.body.status"
                NumericEquals: 200
                Next: Orden Creada
              - Variable: "$.body.status"
                NumericEquals: 600
                Comment: "Pedido Duplicado 600"
                Next: Pedido Duplicado
            Default: CancelOrder

          CancelOrder:
            Type: Task
            Resource:
              Fn::GetAtt: [cancelOrder, Arn]
            OutputPath: "$.Payload"
            Retry:
              - ErrorEquals: ["States.ALL"]
                IntervalSeconds: 6
                MaxAttempts: 6
                BackoffRate: 2
            Next: Fail

          Pedido Duplicado:
            Type: Fail

          Orden Creada:
            Type: Succeed

          Fail:
            Type: Fail
